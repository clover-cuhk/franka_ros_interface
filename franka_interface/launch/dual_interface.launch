<?xml version="1.0" ?>
<launch>
  <arg name="load_gripper" default="false" />
  <arg name="rate" default="1000" />
  <arg name="start_controllers" default="true" />
  <arg name="start_moveit" default="true" />
  <arg name="fake_execution" default="false" /> <!-- Only valid if running moveit move group (start_moveit:=true) -->
  <arg name="load_demo_planning_scene" default="false"/>

  <group ns="panda_left">
    <!-- Panda Control Interface -->
    <param name="robot_description" command="$(find xacro)/xacro '$(find franka_panda_description)/robots/panda_left_arm_hand.urdf.xacro'" if="$(arg load_gripper)" />
    <param name="robot_description" command="$(find xacro)/xacro '$(find franka_panda_description)/robots/panda_left_arm.urdf.xacro'" unless="$(arg load_gripper)" />

    <include file="$(find franka_gripper)/launch/franka_gripper.launch" if="$(arg load_gripper)">
      <arg name="robot_ip" value="$(env FRANKA_ROBOT_IP_L)" />
    </include>

    <!-- Start the custom_franka_control_node for advertising controller services and starting custom controller manager-->
    <rosparam command="load" file="$(find franka_interface)/config/robot_left_arm_config.yaml"/>
    <param name="robot_config/robot_ip" type="str" value="$(env FRANKA_ROBOT_IP_L)" />
    <node name="franka_control" pkg="franka_interface" type="custom_franka_control_node" output="screen" required="true" >
      <rosparam command="load" file="$(find franka_interface)/config/custom_left_arm_franka_control_node.yaml" />
      <param name="robot_ip" value="$(env FRANKA_ROBOT_IP_L)" />
      <param name="publish_frequency" value="$(arg rate)"/>
    </node>

    <!-- Start the custom state publisher for franka_ros_interface -->
    <rosparam command="load" file="$(find franka_interface)/config/basic_left_arm_controllers.yaml"/>
    <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_ros_interface/custom_franka_state_controller" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
      <param name="publish_frequency" value="$(arg rate)"/>
    </node>
    <!-- Start joint_state_publisher with the joint states of the robot -->
    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam if="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
      <rosparam unless="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states] </rosparam>
      <param name="rate" value="$(arg rate)"/>
    </node>
    <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam if="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states_desired, franka_gripper/joint_states] </rosparam>
      <rosparam unless="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states_desired] </rosparam>
      <param name="rate" value="$(arg rate)"/>
      <remap from="/joint_states" to="/joint_states_desired" />
    </node>

    <node name="controllers" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="position_joint_trajectory_controller"/>

    <!-- Load the custom controllers -->
    <rosparam command="load" file="$(find franka_ros_controllers)/config/ros_left_arm_controllers.yaml" ns="franka_ros_interface"/>
    <group if="$(eval arg('start_controllers') == true)">
      <node name="load_controllers" pkg="controller_manager" type="controller_manager" respawn="false"
            output="screen" args="load
            franka_ros_interface/panda_left_velocity_joint_velocity_controller
            franka_ros_interface/panda_left_position_joint_position_controller">
        <!--            franka_ros_interface/effort_joint_impedance_controller-->
        <!--            franka_ros_interface/effort_joint_position_controller-->
        <!--            franka_ros_interface/effort_joint_torque_controller-->
      </node>
    </group>

    <group if="$(eval arg('start_moveit') == true)">
      <include file="$(find franka_moveit)/launch/panda_left_move_group.launch">
        <arg name="fake_execution" value="$(arg fake_execution)" />
        <arg name="load_gripper" value="$(arg load_gripper)" />
        <arg name="info" value="true" />
      </include>
      <group if="$(eval arg('load_demo_planning_scene') == true)">
        <node name="demo_scene_loader" pkg="franka_moveit" type="create_demo_planning_scene.py" respawn="false" output="screen" />
      </group>
    </group>

    <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find franka_moveit)/config/panda_left.rviz"/>

  </group>


  <group ns="panda_right">
    <!-- Panda Control Interface -->
    <param name="robot_description" command="$(find xacro)/xacro '$(find franka_panda_description)/robots/panda_right_arm_hand.urdf.xacro'" if="$(arg load_gripper)" />
    <param name="robot_description" command="$(find xacro)/xacro '$(find franka_panda_description)/robots/panda_right_arm.urdf.xacro'" unless="$(arg load_gripper)" />

    <include file="$(find franka_gripper)/launch/franka_gripper.launch" if="$(arg load_gripper)">
      <arg name="robot_ip" value="$(env FRANKA_ROBOT_IP_R)" />
    </include>

    <!-- Start the custom_franka_control_node for advertising controller services and starting custom controller manager-->
    <rosparam command="load" file="$(find franka_interface)/config/robot_right_arm_config.yaml"/>
    <param name="robot_config/robot_ip" type="str" value="$(env FRANKA_ROBOT_IP_R)" />
    <node name="franka_control" pkg="franka_interface" type="custom_franka_control_node" output="screen" required="true" >
      <!--      <rosparam command="load" file="$(find franka_interface)/config/custom_right_arm_franka_control_node.yaml" />-->
      <param name="robot_ip" value="$(env FRANKA_ROBOT_IP_R)" />
      <param name="publish_frequency" value="$(arg rate)"/>
    </node>

    <!-- Start the custom state publisher for franka_ros_interface -->
    <rosparam command="load" file="$(find franka_interface)/config/basic_right_arm_controllers.yaml"/>
    <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_ros_interface/custom_franka_state_controller" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
      <param name="publish_frequency" value="$(arg rate)"/>
    </node>

    <!-- Start joint_state_publisher with the joint states of the robot -->
    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam if="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
      <rosparam unless="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states] </rosparam>
      <param name="rate" value="$(arg rate)"/>
    </node>
    <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam if="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states_desired, franka_gripper/joint_states] </rosparam>
      <rosparam unless="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states_desired] </rosparam>
      <param name="rate" value="$(arg rate)"/>
      <remap from="/joint_states" to="/joint_states_desired" />
    </node>

    <node name="controllers" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="position_joint_trajectory_controller"/>

    <rosparam command="load" file="$(find franka_ros_controllers)/config/ros_right_arm_controllers.yaml" ns="franka_ros_interface"/>
    <!-- Load the custom controllers -->
    <group if="$(eval arg('start_controllers') == true)">
      <node name="load_controllers" pkg="controller_manager" type="controller_manager" respawn="false"
            output="screen" args="load
            franka_ros_interface/panda_right_velocity_joint_velocity_controller
            franka_ros_interface/panda_right_position_joint_position_controller">
        <!--            franka_ros_interface/effort_joint_impedance_controller-->
        <!--            franka_ros_interface/effort_joint_position_controller-->
        <!--            franka_ros_interface/effort_joint_torque_controller-->
      </node>
    </group>

    <group if="$(eval arg('start_moveit') == true)">
      <include file="$(find franka_moveit)/launch/panda_right_move_group.launch">
        <arg name="fake_execution" value="$(arg fake_execution)" />
        <arg name="load_gripper" value="$(arg load_gripper)" />
        <arg name="info" value="true" />
      </include>
      <group if="$(eval arg('load_demo_planning_scene') == true)">
        <node name="demo_scene_loader" pkg="franka_moveit" type="create_demo_planning_scene.py" respawn="false" output="screen" />
      </group>
    </group>

    <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find franka_moveit)/config/panda_right.rviz"/>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="base_to_left_link0" args="0 0.27 0 0 0 0 1 base panda_left_link0 100" />
  <node pkg="tf" type="static_transform_publisher" name="base_to_right_link0" args="0 -0.27 0 0 0 0 1 base panda_right_link0 100" />
  <node pkg="tf" type="static_transform_publisher" name="world_to_base" args="0 0 1 0 0 0 1 world base 100" />


</launch>


